[8/29, 10:14 AM] Divij: 3.Use the selection sort to put the number 3, 2, 4, 1, 5 into increasing order. Illustrate the output returned in each pass clearly. Also, write the pseudo
 algorithm to it.
[8/29, 10:14 AM] Divij: 4. Write a program to sort the given array using MergeSort.
[8/29, 10:14 AM] Divij: 5. Trace quick sort on the list L= {11, 34, 67, 78, 78, 78, 99}.What are your
 observations?
[8/29, 10:14 AM] Divij: 6. Write the program for Searching Techniques and Complexity Analysis
[8/29, 10:14 AM] Divij: 7. Write a program in Java to search item ‘8’ in the given
 array 12, 7, 9, 5, 16, 8, 52, 67, 90 using Linear Search.
[8/29, 10:14 AM] Divij: 8. Write a program in Java to search item ‘50’ in the given array 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 using Binary search.



public class SelectionSortDemo {
    public static void main(String[] args) {
        int[] arr = {3, 2, 4, 1, 5};
        
        System.out.println("Initial array:");
        printArray(arr);
        
        int n = arr.length;
        for (int i = 0; i < n - 1; i++) {
            int minIndex = i;
            // Find the minimum element in unsorted part
            for (int j = i + 1; j < n; j++) {
                if (arr[j] < arr[minIndex]) {
                    minIndex = j;
                }
            }
            // Swap minimum element with the first unsorted element
            int temp = arr[minIndex];
            arr[minIndex] = arr[i];
            arr[i] = temp;
            
            System.out.print("After pass " + (i + 1) + ": ");
            printArray(arr);
        }
    }

    // Helper method to print array
    public static void printArray(int[] arr) {
        for (int num : arr) {
            System.out.print(num + " ");
        }
        System.out.println();
    }
}











public class MergeSortDemo {
    public static void main(String[] args) {
        int[] arr = {3, 2, 4, 1, 5};

        System.out.println("Original array:");
        printArray(arr);

        mergeSort(arr, 0, arr.length - 1);

        System.out.println("Sorted array:");
        printArray(arr);
    }

    // Merge Sort function
    public static void mergeSort(int[] arr, int left, int right) {
        if (left < right) {
            int mid = (left + right) / 2;

            // Sort first half
            mergeSort(arr, left, mid);

            // Sort second half
            mergeSort(arr, mid + 1, right);

            // Merge sorted halves
            merge(arr, left, mid, right);
        }
    }

    // Merge two sorted subarrays arr[left..mid] and arr[mid+1..right]
    public static void merge(int[] arr, int left, int mid, int right) {
        // Sizes of two subarrays
        int n1 = mid - left + 1;
        int n2 = right - mid;

        // Temp arrays
        int[] L = new int[n1];
        int[] R = new int[n2];

        // Copy data to temp arrays
        for (int i = 0; i < n1; i++)
            L[i] = arr[left + i];
        for (int j = 0; j < n2; j++)
            R[j] = arr[mid + 1 + j];

        // Merge temp arrays back into arr[left..right]
        int i = 0, j = 0;
        int k = left;

        while (i < n1 && j < n2) {
            if (L[i] <= R[j]) {
                arr[k] = L[i];
                i++;
            } else {
                arr[k] = R[j];
                j++;
            }
            k++;
        }

        // Copy remaining elements of L[], if any
        while (i < n1) {
            arr[k] = L[i];
            i++;
            k++;
        }

        // Copy remaining elements of R[], if any
        while (j < n2) {
            arr[k] = R[j];
            j++;
            k++;
        }
    }

    // Utility method to print array
    public static void printArray(int[] arr) {
        for (int num : arr) {
            System.out.print(num + " ");
        }
        System.out.println();
    }
}











public class QuickSortDemo {
    public static void main(String[] args) {
        int[] arr = {76, 34, 67, 78, 78, 11 , 99};

        System.out.println("Original array:");
        printArray(arr);

        quickSort(arr, 0, arr.length - 1);

        System.out.println("Sorted array:");
        printArray(arr);
    }

    // Quick Sort function
    public static void quickSort(int[] arr, int low, int high) {
        if (low < high) {
            int pivotIndex = partition(arr, low, high);  // Partition the array

            quickSort(arr, low, pivotIndex - 1);  // Sort left subarray
            quickSort(arr, pivotIndex + 1, high); // Sort right subarray
        }
    }

    // Partition function
    public static int partition(int[] arr, int low, int high) {
        int pivot = arr[high];  // Choose last element as pivot
        int i = low - 1;        // Index of smaller element

        for (int j = low; j < high; j++) {
            if (arr[j] <= pivot) {
                i++;
                swap(arr, i, j);
            }
        }

        swap(arr, i + 1, high);  // Place pivot in the correct position
        return i + 1;
    }

    // Swap helper function
    public static void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    // Utility function to print the array
    public static void printArray(int[] arr) {
        for (int num : arr) {
            System.out.print(num + " ");
        }
        System.out.println();
    }
}


















public class SearchInArray {
    public static void main(String[] args) {
        int[] arr = {12, 7, 9, 5, 16, 8, 52, 67, 90};
        int target = 8;
        
        int index = linearSearch(arr, target);
        
        if (index == -1) {
            System.out.println(target + " not found in the array.");
        } else {
            System.out.println(target + " found at index " + index);
        }
    }
    
    // Linear Search function
    public static int linearSearch(int[] arr, int target) {
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == target) {
                return i;  // return the index where target is found
            }
        }
        return -1;  // target not found
    }
}






import java.util.Arrays;

public class BinarySearchDemo {
    public static void main(String[] args) {
        int[] arr = {12, 7, 9, 5, 16, 8, 52, 67, 90};
        int target = 8;
        
        // Sort the array first
        Arrays.sort(arr);
        System.out.println("Sorted array: " + Arrays.toString(arr));
        
        int index = binarySearch(arr, target);
        
        if (index == -1) {
            System.out.println(target + " not found in the array.");
        } else {
            System.out.println(target + " found at index " + index);
        }
    }
    
    // Binary Search function
    public static int binarySearch(int[] arr, int target) {
        int left = 0;
        int right = arr.length - 1;
        
        while (left <= right) {
            int mid = left + (right - left) / 2;
            
            if (arr[mid] == target) {
                return mid;  // Found the target
            }
            
            if (arr[mid] < target) {
                left = mid + 1;  // Search right half
            } else {
                right = mid - 1; // Search left half
            }
        }
        
        return -1;  // Target not found
    }
}
